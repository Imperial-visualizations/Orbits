{"remainingRequest":"C:\\Users\\Pured\\Desktop\\Visualisations 2020\\OrbitsTest\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\Pured\\Desktop\\Visualisations 2020\\OrbitsTest\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\Pured\\Desktop\\Visualisations 2020\\OrbitsTest\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Pured\\Desktop\\Visualisations 2020\\OrbitsTest\\src\\App.vue?vue&type=template&id=7ba5bd90&","dependencies":[{"path":"C:\\Users\\Pured\\Desktop\\Visualisations 2020\\OrbitsTest\\src\\App.vue","mtime":1597850728850},{"path":"C:\\Users\\Pured\\Desktop\\Visualisations 2020\\OrbitsTest\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Pured\\Desktop\\Visualisations 2020\\OrbitsTest\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\Pured\\Desktop\\Visualisations 2020\\OrbitsTest\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Pured\\Desktop\\Visualisations 2020\\OrbitsTest\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}