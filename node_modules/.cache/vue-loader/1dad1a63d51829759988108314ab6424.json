{"remainingRequest":"/home/robert/Desktop/Visualisations2020/Orbits/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/robert/Desktop/Visualisations2020/Orbits/src/components/EffectivePotential.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/robert/Desktop/Visualisations2020/Orbits/src/components/EffectivePotential.vue","mtime":1597655462897},{"path":"/home/robert/Desktop/Visualisations2020/Orbits/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/robert/Desktop/Visualisations2020/Orbits/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/robert/Desktop/Visualisations2020/Orbits/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/robert/Desktop/Visualisations2020/Orbits/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KDQppbXBvcnQgKiBhcyBkMyBmcm9tICdkMyc7DQppbXBvcnQgUGxvdGx5IGZyb20gJ3Bsb3RseS5qcyc7DQoNCmV4cG9ydCBkZWZhdWx0IHsNCiAgICBuYW1lOidpdi1lZmYtcG90JywNCiAgICBwcm9wczogew0KICAgICAgICBwYXRoVmFsczoge2RlZmF1bHQ6IFtdfSwNCiAgICAgICAgcmVkcmF3OiB7ZGVmYXVsdDogdHJ1ZX0sDQogICAgICAgIGN1cnJlbnRSYWRpdXM6IHtkZWZhdWx0OiAwfSwNCiAgICB9LA0KICAgIG1ldGhvZHM6ew0KICAgICAgICB1cGRhdGVQbG90KHBhdGhWYWxzKXsNCiAgICAgICAgICAgIHRoaXMucGF0aFZhbHMgPSBwYXRoVmFsczsNCiAgICAgICAgICAgIHRoaXMucmVkcmF3ID0gdHJ1ZTsNCiAgICAgICAgfSwNCiAgICAgICAgdXBkYXRlUG9zaXRpb24ocG9zKXsNCiAgICAgICAgICAgIHRoaXMuY3VycmVudFJhZGl1cyA9IE1hdGgucG93KE1hdGgucG93KHBvc1swXSwgMikgKyBNYXRoLnBvdyhwb3NbMV0sIDIpLCAwLjUpOw0KICAgICAgICB9DQogICAgfSwNCiAgICBtb3VudGVkKCl7DQogICAgICAgIGxldCB2bSA9IHRoaXM7DQogICAgICAgIGNvbnN0IEdyYXZDb25zdCA9IDE7DQogICAgICAgIGNvbnN0IHN1bk1hc3MgPSAxMDA7DQoNCiAgICAgICAgbGV0IHBsb3RSYWRpdXMgPSAyMDA7DQoNCiAgICAgICAgLy9maW5kIGVuZXJneSBvZiBvcmJpdA0KICAgICAgICBmdW5jdGlvbiBmaW5kRSgpew0KICAgICAgICAgICAgLy8gRSA9IFVlZmYgKyByYWRpYWwgS0UNCiAgICAgICAgICAgIGxldCByTWFnID0gTWF0aC5wb3coTWF0aC5wb3codm0ucGF0aFZhbHNbMF1bMF0sIDIpICsgTWF0aC5wb3codm0ucGF0aFZhbHNbMF1bMV0sMiksMC41KTsNCiAgICAgICAgICAgIC8vZG90IHByb2R1Y3Qgb2YgY29vcmRpbmF0ZXMgYW5kIHZlbG9jaXR5LCBkaXZpZGVkIGJ5IG1hZ25pdHVkZSBvZiByYWRpYWwgcG9zaXRpb24gdmVjdG9yLCB0byBnaXZlIG1hZ25pdHVkZSBvZiByYWRpYWwgdmVsb2NpdHkNCiAgICAgICAgICAgIGxldCByYWRpYWxWTWFnID0gKHZtLnBhdGhWYWxzWzBdWzBdKnZtLnBhdGhWYWxzWzFdWzBdICsgdm0ucGF0aFZhbHNbMF1bMV0qdm0ucGF0aFZhbHNbMV1bMV0pL3JNYWc7IC8vTWF0aC5wb3coTWF0aC5wb3codm0ucGF0aFZhbHNbMV1bMF0sIDIpICsgTWF0aC5wb3codm0ucGF0aFZhbHNbMV1bMV0sMiksMC41KTsNCg0KICAgICAgICAgICAgbGV0IEUgPSBlZmZlY3RpdmVQb3RlbnRpYWwock1hZykgKyAwLjUqTWF0aC5wb3cocmFkaWFsVk1hZywyKTsNCiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdlbmVyZ3kgPSAnLCBFKTsNCiAgICAgICAgICAgIHJldHVybiBFDQogICAgICAgIH07DQoNCiAgICAgICAgLy9yIHNob3VsZCBiZSBzY2FsYXINCiAgICAgICAgZnVuY3Rpb24gZmVsdFBvdGVudGlhbChyKXsNCiAgICAgICAgICAgIGxldCB2TWFnID0gTWF0aC5wb3coTWF0aC5wb3codm0ucGF0aFZhbHNbMV1bMF0sMikgKyBNYXRoLnBvdyh2bS5wYXRoVmFsc1sxXVsxXSwyKSwgMC41KTsNCiAgICAgICAgICAgIGxldCByTWFnID0gTWF0aC5wb3coTWF0aC5wb3codm0ucGF0aFZhbHNbMF1bMF0sMikgKyBNYXRoLnBvdyh2bS5wYXRoVmFsc1swXVsxXSwyKSwgMC41KTsgLy9DdXJyZW50IHBvc2l0aW9uIGZvciBjb25zdGFudCBMIGNhbGN1bGF0aW9uDQogICAgICAgICAgICBsZXQgYU1hZyA9IE1hdGgucG93KE1hdGgucG93KHZtLnBhdGhWYWxzWzBdWzBdICsgdm0ucGF0aFZhbHNbMV1bMF0sMikgKyBNYXRoLnBvdyh2bS5wYXRoVmFsc1swXVsxXSArIHZtLnBhdGhWYWxzWzFdWzFdLDIpLCAwLjUpOw0KICAgICAgICAgICAgbGV0IHRoZXRhID0gTWF0aC5hY29zKChNYXRoLnBvdyhyTWFnLDIpICsgTWF0aC5wb3codk1hZywyKSAtIE1hdGgucG93KGFNYWcsMikpLygyKnJNYWcqdk1hZykpOw0KICAgICAgICAgICAgDQogICAgICAgICAgICAvL2NvbnNvbGUubG9nKHZNYWcsIHJNYWcsIGFNYWcsIHRoZXRhKTsNCg0KICAgICAgICAgICAgbGV0IEwgPSB2TWFnICogck1hZyAqIE1hdGguc2luKHRoZXRhKTsNCg0KICAgICAgICAgICAgcmV0dXJuIE1hdGgucG93KEwsIDIpLygyKk1hdGgucG93KHIsIDIpKTsNCiAgICAgICAgfTsNCg0KICAgICAgICAvL3Igc2hvdWxkIGJlIHNjYWxhcg0KICAgICAgICBmdW5jdGlvbiByZWFsUG90ZW50aWFsKHIpew0KICAgICAgICAgICAgcmV0dXJuIC1HcmF2Q29uc3Qqc3VuTWFzcyooMS9yKTsNCiAgICAgICAgfTsNCg0KICAgICAgICAvL3Igc2hvdWxkIGJlIHNjYWxhcg0KICAgICAgICBmdW5jdGlvbiBlZmZlY3RpdmVQb3RlbnRpYWwocil7DQogICAgICAgICAgICByZXR1cm4gZmVsdFBvdGVudGlhbChyKSArIHJlYWxQb3RlbnRpYWwocik7DQogICAgICAgIH07DQoNCiAgICAgICAgLy9maW5kcyBtaW4gYW5kIG1heCBvZiBwb3RlbnRpYWxzIGF0IG1pbmltdW0gcmFkaXVzIG9mIG9yYml0IChmb3IgcmVhc29uYWJsZSBwbG90dGluZykNCiAgICAgICAgZnVuY3Rpb24gZmluZFlSYW5nZSgpew0KICAgICAgICAgICAgbGV0IG1pblIgPSB2bS5wYXRoVmFsc1szXTsNCiAgICAgICAgICAgIGxldCB5TWluID0gTWF0aC5taW4ocmVhbFBvdGVudGlhbChtaW5SKSwgZmVsdFBvdGVudGlhbChtaW5SKSk7DQogICAgICAgICAgICBsZXQgeU1heCA9IE1hdGgubWF4KHJlYWxQb3RlbnRpYWwobWluUiksIGZlbHRQb3RlbnRpYWwobWluUikpOw0KICAgICAgICAgICAgcmV0dXJuIFt5TWluLCB5TWF4XTsNCiAgICAgICAgfQ0KDQogICAgICAgIGZ1bmN0aW9uIHJlZHJhdygpew0KICAgICAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKHJlZHJhdyk7DQoNCiAgICAgICAgICAgIC8vdXBkYXRlIGxpbmVzIHdoZW4gDQogICAgICAgICAgICBpZih2bS5yZWRyYXcgJiYgcGxvdFJhZGl1cyAhPT0gdm0ucGF0aFZhbHNbMl0pew0KICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgIGxldCByVmFscyA9IFtdOw0KICAgICAgICAgICAgICAgIGxldCBVZWZmID0gW107DQogICAgICAgICAgICAgICAgbGV0IFUgPSBbXTsNCiAgICAgICAgICAgICAgICBsZXQgVWZlbHQgPSBbXTsNCiAgICAgICAgICAgICAgICBsZXQgRW5lcmd5WSA9IFtdOw0KICAgICAgICAgICAgICAgIGxldCBFbmVyZ3kgPSBmaW5kRSgpOw0KICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgIHBsb3RSYWRpdXMgPSB2bS5wYXRoVmFsc1syXTsNCiAgICAgICAgICAgICAgICBsZXQgc3RlcFNpemUgPSBwbG90UmFkaXVzLzIwMDsNCg0KICAgICAgICAgICAgICAgIGZvcihsZXQgciA9IDAuMTsgciA8IHBsb3RSYWRpdXM7IHIrPSBzdGVwU2l6ZSl7DQogICAgICAgICAgICAgICAgICAgIHJWYWxzLnB1c2gocik7DQogICAgICAgICAgICAgICAgICAgIFVlZmYucHVzaChlZmZlY3RpdmVQb3RlbnRpYWwocikpOw0KICAgICAgICAgICAgICAgICAgICBVLnB1c2gocmVhbFBvdGVudGlhbChyKSk7DQogICAgICAgICAgICAgICAgICAgIFVmZWx0LnB1c2goZmVsdFBvdGVudGlhbChyKSk7DQogICAgICAgICAgICAgICAgICAgIEVuZXJneVkucHVzaChFbmVyZ3kpOw0KICAgICAgICAgICAgICAgIH07DQoNCg0KICAgICAgICAgICAgICAgIGxldCB0cmFjZTEgPSB7DQogICAgICAgICAgICAgICAgeDogclZhbHMsDQogICAgICAgICAgICAgICAgeTogVWVmZiwNCiAgICAgICAgICAgICAgICB0eXBlOiAnbGluZXMnLA0KICAgICAgICAgICAgICAgIG5hbWU6ICdFZmYgUG90JywNCiAgICAgICAgICAgICAgICB9Ow0KDQogICAgICAgICAgICAgICAgbGV0IHRyYWNlMiA9IHsNCiAgICAgICAgICAgICAgICB4OiByVmFscywNCiAgICAgICAgICAgICAgICB5OiBVLA0KICAgICAgICAgICAgICAgIHR5cGU6ICdsaW5lcycsDQogICAgICAgICAgICAgICAgbmFtZTogJ1BvdGVudGlhbCcsDQogICAgICAgICAgICAgICAgfTsNCg0KICAgICAgICAgICAgICAgIGxldCB0cmFjZTMgPSB7DQogICAgICAgICAgICAgICAgeDogclZhbHMsDQogICAgICAgICAgICAgICAgeTogVWZlbHQsDQogICAgICAgICAgICAgICAgdHlwZTogJ2xpbmVzJywNCiAgICAgICAgICAgICAgICBuYW1lOiAnQW5nIE1vbScsDQogICAgICAgICAgICAgICAgfTsNCg0KICAgICAgICAgICAgICAgIGxldCB0b3RFID0gew0KICAgICAgICAgICAgICAgIHg6IHJWYWxzLA0KICAgICAgICAgICAgICAgIHk6IEVuZXJneVksDQogICAgICAgICAgICAgICAgbmFtZTogJ1RvdGFsIEVuZXJneScsDQogICAgICAgICAgICAgICAgbGluZToge2Rhc2g6ICdkYXNoJywgd2lkdGg6IDF9LA0KICAgICAgICAgICAgICAgIH07DQoNCiAgICAgICAgICAgICAgICBsZXQgZGF0YSA9IFt0b3RFLCB0cmFjZTEsIHRyYWNlMiwgdHJhY2UzXTsNCg0KICAgICAgICAgICAgICAgIFBsb3RseS5uZXdQbG90KCdwb3RlbnRpYWxQbG90JywgZGF0YSwgew0KICAgICAgICAgICAgICAgIHhheGlzOiB7cmFuZ2U6IFswLCBwbG90UmFkaXVzXSwNCiAgICAgICAgICAgICAgICB0aXRsZTogJ1JhZGl1cycsfSwNCiAgICAgICAgICAgICAgICB5YXhpczoge3JhbmdlOiBmaW5kWVJhbmdlKCl9LA0KICAgICAgICAgICAgICAgIG1hcmdpbjogew0KICAgICAgICAgICAgICAgICAgICB0OiAxMCwNCiAgICAgICAgICAgICAgICAgICAgbDogMjAsDQogICAgICAgICAgICAgICAgICAgIGI6IDUwLA0KICAgICAgICAgICAgICAgIH0sDQogICAgICAgICAgICAgICAgcGxvdF9iZ2NvbG9yOiAncmdiYSgwLDAsMCwwKScsDQogICAgICAgICAgICAgICAgcGFwZXJfYmdjb2xvcjogJ3JnYmEoMCwwLDAsMCknLA0KICAgICAgICAgICAgICAgIH0pDQoNCg0KICAgICAgICAgICAgICAgIHZtLnJlZHJhdyA9IGZhbHNlOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICBsZXQgbWFya2VyID0gew0KICAgICAgICAgICAgICAgIHg6W3ZtLmN1cnJlbnRSYWRpdXNdLA0KICAgICAgICAgICAgICAgIHk6W2VmZmVjdGl2ZVBvdGVudGlhbCh2bS5jdXJyZW50UmFkaXVzKV0sDQogICAgICAgICAgICAgICAgdHlwZToibWFya2VycyIsDQogICAgICAgICAgICAgICAgbmFtZToiQ3VycmVudCBVZWZmIiwNCg0KICAgICAgICAgICAgfTsNCg0KICAgICAgICAgICAgUGxvdGx5LmFuaW1hdGUoJ3BvdGVudGlhbFBsb3QnLA0KICAgICAgICAgICAgICAgIHtkYXRhOiBbbWFya2VyXX0sDQogICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICBmcm9tY3VycmVudDogdHJ1ZSwNCiAgICAgICAgICAgICAgICAgICAgdHJhbnNpdGlvbjoge2R1cmF0aW9uOiAwfSwNCiAgICAgICAgICAgICAgICAgICAgZnJhbWU6IHtkdXJhdGlvbjogMCwgcmVkcmF3OiBmYWxzZX0NCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICApOw0KICAgICAgICB9DQoNCiAgICAgICAgcmVkcmF3KCk7DQogICAgfQ0KfQ0K"},{"version":3,"sources":["EffectivePotential.vue"],"names":[],"mappings":";;;;;;;;AAQA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA","file":"EffectivePotential.vue","sourceRoot":"src/components","sourcesContent":["<template>\r\n    <div>\r\n        <div id=\"potentialPlot\" style=\"height: 35vh\">\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport * as d3 from 'd3';\r\nimport Plotly from 'plotly.js';\r\n\r\nexport default {\r\n    name:'iv-eff-pot',\r\n    props: {\r\n        pathVals: {default: []},\r\n        redraw: {default: true},\r\n        currentRadius: {default: 0},\r\n    },\r\n    methods:{\r\n        updatePlot(pathVals){\r\n            this.pathVals = pathVals;\r\n            this.redraw = true;\r\n        },\r\n        updatePosition(pos){\r\n            this.currentRadius = Math.pow(Math.pow(pos[0], 2) + Math.pow(pos[1], 2), 0.5);\r\n        }\r\n    },\r\n    mounted(){\r\n        let vm = this;\r\n        const GravConst = 1;\r\n        const sunMass = 100;\r\n\r\n        let plotRadius = 200;\r\n\r\n        //find energy of orbit\r\n        function findE(){\r\n            // E = Ueff + radial KE\r\n            let rMag = Math.pow(Math.pow(vm.pathVals[0][0], 2) + Math.pow(vm.pathVals[0][1],2),0.5);\r\n            //dot product of coordinates and velocity, divided by magnitude of radial position vector, to give magnitude of radial velocity\r\n            let radialVMag = (vm.pathVals[0][0]*vm.pathVals[1][0] + vm.pathVals[0][1]*vm.pathVals[1][1])/rMag; //Math.pow(Math.pow(vm.pathVals[1][0], 2) + Math.pow(vm.pathVals[1][1],2),0.5);\r\n\r\n            let E = effectivePotential(rMag) + 0.5*Math.pow(radialVMag,2);\r\n            console.log('energy = ', E);\r\n            return E\r\n        };\r\n\r\n        //r should be scalar\r\n        function feltPotential(r){\r\n            let vMag = Math.pow(Math.pow(vm.pathVals[1][0],2) + Math.pow(vm.pathVals[1][1],2), 0.5);\r\n            let rMag = Math.pow(Math.pow(vm.pathVals[0][0],2) + Math.pow(vm.pathVals[0][1],2), 0.5); //Current position for constant L calculation\r\n            let aMag = Math.pow(Math.pow(vm.pathVals[0][0] + vm.pathVals[1][0],2) + Math.pow(vm.pathVals[0][1] + vm.pathVals[1][1],2), 0.5);\r\n            let theta = Math.acos((Math.pow(rMag,2) + Math.pow(vMag,2) - Math.pow(aMag,2))/(2*rMag*vMag));\r\n            \r\n            //console.log(vMag, rMag, aMag, theta);\r\n\r\n            let L = vMag * rMag * Math.sin(theta);\r\n\r\n            return Math.pow(L, 2)/(2*Math.pow(r, 2));\r\n        };\r\n\r\n        //r should be scalar\r\n        function realPotential(r){\r\n            return -GravConst*sunMass*(1/r);\r\n        };\r\n\r\n        //r should be scalar\r\n        function effectivePotential(r){\r\n            return feltPotential(r) + realPotential(r);\r\n        };\r\n\r\n        //finds min and max of potentials at minimum radius of orbit (for reasonable plotting)\r\n        function findYRange(){\r\n            let minR = vm.pathVals[3];\r\n            let yMin = Math.min(realPotential(minR), feltPotential(minR));\r\n            let yMax = Math.max(realPotential(minR), feltPotential(minR));\r\n            return [yMin, yMax];\r\n        }\r\n\r\n        function redraw(){\r\n            requestAnimationFrame(redraw);\r\n\r\n            //update lines when \r\n            if(vm.redraw && plotRadius !== vm.pathVals[2]){\r\n                \r\n                let rVals = [];\r\n                let Ueff = [];\r\n                let U = [];\r\n                let Ufelt = [];\r\n                let EnergyY = [];\r\n                let Energy = findE();\r\n                \r\n                plotRadius = vm.pathVals[2];\r\n                let stepSize = plotRadius/200;\r\n\r\n                for(let r = 0.1; r < plotRadius; r+= stepSize){\r\n                    rVals.push(r);\r\n                    Ueff.push(effectivePotential(r));\r\n                    U.push(realPotential(r));\r\n                    Ufelt.push(feltPotential(r));\r\n                    EnergyY.push(Energy);\r\n                };\r\n\r\n\r\n                let trace1 = {\r\n                x: rVals,\r\n                y: Ueff,\r\n                type: 'lines',\r\n                name: 'Eff Pot',\r\n                };\r\n\r\n                let trace2 = {\r\n                x: rVals,\r\n                y: U,\r\n                type: 'lines',\r\n                name: 'Potential',\r\n                };\r\n\r\n                let trace3 = {\r\n                x: rVals,\r\n                y: Ufelt,\r\n                type: 'lines',\r\n                name: 'Ang Mom',\r\n                };\r\n\r\n                let totE = {\r\n                x: rVals,\r\n                y: EnergyY,\r\n                name: 'Total Energy',\r\n                line: {dash: 'dash', width: 1},\r\n                };\r\n\r\n                let data = [totE, trace1, trace2, trace3];\r\n\r\n                Plotly.newPlot('potentialPlot', data, {\r\n                xaxis: {range: [0, plotRadius],\r\n                title: 'Radius',},\r\n                yaxis: {range: findYRange()},\r\n                margin: {\r\n                    t: 10,\r\n                    l: 20,\r\n                    b: 50,\r\n                },\r\n                plot_bgcolor: 'rgba(0,0,0,0)',\r\n                paper_bgcolor: 'rgba(0,0,0,0)',\r\n                })\r\n\r\n\r\n                vm.redraw = false;\r\n            }\r\n\r\n            let marker = {\r\n                x:[vm.currentRadius],\r\n                y:[effectivePotential(vm.currentRadius)],\r\n                type:\"markers\",\r\n                name:\"Current Ueff\",\r\n\r\n            };\r\n\r\n            Plotly.animate('potentialPlot',\r\n                {data: [marker]},\r\n                {\r\n                    fromcurrent: true,\r\n                    transition: {duration: 0},\r\n                    frame: {duration: 0, redraw: false}\r\n                }\r\n            );\r\n        }\r\n\r\n        redraw();\r\n    }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n\r\n</style>"]}]}