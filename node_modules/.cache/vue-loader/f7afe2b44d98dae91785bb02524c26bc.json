{"remainingRequest":"/home/robert/Desktop/Visualisations2020/Orbits/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/robert/Desktop/Visualisations2020/Orbits/src/components/EffectivePotential.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/robert/Desktop/Visualisations2020/Orbits/src/components/EffectivePotential.vue","mtime":1597395082848},{"path":"/home/robert/Desktop/Visualisations2020/Orbits/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/robert/Desktop/Visualisations2020/Orbits/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/robert/Desktop/Visualisations2020/Orbits/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/robert/Desktop/Visualisations2020/Orbits/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KDQppbXBvcnQgKiBhcyBkMyBmcm9tICdkMyc7DQppbXBvcnQgUGxvdGx5IGZyb20gJ3Bsb3RseS5qcyc7DQoNCmV4cG9ydCBkZWZhdWx0IHsNCiAgICBuYW1lOidpdi1lZmYtcG90JywNCiAgICBwcm9wczogew0KICAgICAgICBwYXRoVmFsczoge2RlZmF1bHQ6IFtdfSwNCiAgICAgICAgcmVkcmF3OiB7ZGVmYXVsdDogdHJ1ZX0sDQogICAgICAgIGN1cnJlbnRSYWRpdXM6IHtkZWZhdWx0OiAwfSwNCiAgICB9LA0KICAgIG1ldGhvZHM6ew0KICAgICAgICB1cGRhdGVQbG90KHBhdGhWYWxzKXsNCiAgICAgICAgICAgIGNvbnNvbGUubG9nKCd1cGRhdGVQbG90IEVmZlBvdCcpOw0KICAgICAgICAgICAgdGhpcy5wYXRoVmFscyA9IHBhdGhWYWxzOw0KICAgICAgICAgICAgdGhpcy5yZWRyYXcgPSB0cnVlOw0KICAgICAgICB9LA0KICAgICAgICB1cGRhdGVQb3NpdGlvbihwb3Mpew0KICAgICAgICAgICAgdGhpcy5jdXJyZW50UmFkaXVzID0gTWF0aC5wb3coTWF0aC5wb3cocG9zWzBdLCAyKSArIE1hdGgucG93KHBvc1sxXSwgMiksIDAuNSk7DQogICAgICAgIH0NCiAgICB9LA0KICAgIG1vdW50ZWQoKXsNCiAgICAgICAgbGV0IHZtID0gdGhpczsNCiAgICAgICAgY29uc3QgR3JhdkNvbnN0ID0gMTsNCiAgICAgICAgY29uc3Qgc3VuTWFzcyA9IDEwMDsNCg0KICAgICAgICBsZXQgcGxvdFJhZGl1cyA9IDIwMDsNCg0KICAgICAgICAvL2ZpbmQgZW5lcmd5IG9mIG9yYml0DQogICAgICAgIGZ1bmN0aW9uIGZpbmRFKCl7DQogICAgICAgICAgICAvLyBFID0gVWVmZiArIHJhZGlhbCBLRQ0KICAgICAgICAgICAgbGV0IHJNYWcgPSBNYXRoLnBvdyhNYXRoLnBvdyh2bS5wYXRoVmFsc1swXVswXSwgMikgKyBNYXRoLnBvdyh2bS5wYXRoVmFsc1swXVsxXSwyKSwwLjUpOw0KICAgICAgICAgICAgbGV0IHZNYWcgPSBNYXRoLnBvdyhNYXRoLnBvdyh2bS5wYXRoVmFsc1sxXVswXSwgMikgKyBNYXRoLnBvdyh2bS5wYXRoVmFsc1sxXVsxXSwyKSwwLjUpOw0KDQogICAgICAgICAgICBsZXQgRSA9IGVmZmVjdGl2ZVBvdGVudGlhbChyTWFnKSArIDAuNSpNYXRoLnBvdyh2TWFnLDIpOw0KICAgICAgICAgICAgcmV0dXJuIEUNCiAgICAgICAgfTsNCg0KICAgICAgICAvL3Igc2hvdWxkIGJlIHNjYWxhcg0KICAgICAgICBmdW5jdGlvbiBmZWx0UG90ZW50aWFsKHIpew0KICAgICAgICAgICAgbGV0IHZNYWcgPSBNYXRoLnBvdyhNYXRoLnBvdyh2bS5wYXRoVmFsc1sxXVswXSwyKSArIE1hdGgucG93KHZtLnBhdGhWYWxzWzFdWzFdLDIpLCAwLjUpOw0KICAgICAgICAgICAgbGV0IHJNYWcgPSBNYXRoLnBvdyhNYXRoLnBvdyh2bS5wYXRoVmFsc1swXVswXSwyKSArIE1hdGgucG93KHZtLnBhdGhWYWxzWzBdWzFdLDIpLCAwLjUpOyAvL0N1cnJlbnQgcG9zaXRpb24gZm9yIGNvbnN0YW50IEwgY2FsY3VsYXRpb24NCiAgICAgICAgICAgIGxldCBhTWFnID0gTWF0aC5wb3coTWF0aC5wb3codm0ucGF0aFZhbHNbMF1bMF0gKyB2bS5wYXRoVmFsc1sxXVswXSwyKSArIE1hdGgucG93KHZtLnBhdGhWYWxzWzBdWzFdICsgdm0ucGF0aFZhbHNbMV1bMV0sMiksIDAuNSk7DQogICAgICAgICAgICBsZXQgdGhldGEgPSBNYXRoLmFjb3MoKE1hdGgucG93KHJNYWcsMikgKyBNYXRoLnBvdyh2TWFnLDIpIC0gTWF0aC5wb3coYU1hZywyKSkvKDIqck1hZyp2TWFnKSk7DQogICAgICAgICAgICANCiAgICAgICAgICAgIC8vY29uc29sZS5sb2codk1hZywgck1hZywgYU1hZywgdGhldGEpOw0KDQogICAgICAgICAgICBsZXQgTCA9IHZNYWcgKiByTWFnICogTWF0aC5zaW4odGhldGEpOw0KDQogICAgICAgICAgICByZXR1cm4gTWF0aC5wb3coTCwgMikvKDIqTWF0aC5wb3cociwgMikpOw0KICAgICAgICB9Ow0KDQogICAgICAgIC8vciBzaG91bGQgYmUgc2NhbGFyDQogICAgICAgIGZ1bmN0aW9uIHJlYWxQb3RlbnRpYWwocil7DQogICAgICAgICAgICByZXR1cm4gLUdyYXZDb25zdCpzdW5NYXNzKigxL3IpOw0KICAgICAgICB9Ow0KDQogICAgICAgIC8vciBzaG91bGQgYmUgc2NhbGFyDQogICAgICAgIGZ1bmN0aW9uIGVmZmVjdGl2ZVBvdGVudGlhbChyKXsNCiAgICAgICAgICAgIHJldHVybiBmZWx0UG90ZW50aWFsKHIpICsgcmVhbFBvdGVudGlhbChyKTsNCiAgICAgICAgfTsNCg0KICAgICAgICAvL2ZpbmRzIG1pbiBhbmQgbWF4IG9mIHBvdGVudGlhbHMgYXQgbWluaW11bSByYWRpdXMgb2Ygb3JiaXQgKGZvciByZWFzb25hYmxlIHBsb3R0aW5nKQ0KICAgICAgICBmdW5jdGlvbiBmaW5kWVJhbmdlKCl7DQogICAgICAgICAgICBsZXQgbWluUiA9IHZtLnBhdGhWYWxzWzNdOw0KICAgICAgICAgICAgbGV0IHlNaW4gPSBNYXRoLm1pbihyZWFsUG90ZW50aWFsKG1pblIpLCBmZWx0UG90ZW50aWFsKG1pblIpKTsNCiAgICAgICAgICAgIGxldCB5TWF4ID0gTWF0aC5tYXgocmVhbFBvdGVudGlhbChtaW5SKSwgZmVsdFBvdGVudGlhbChtaW5SKSk7DQogICAgICAgICAgICByZXR1cm4gW3lNaW4qMS41LCB5TWF4XTsNCiAgICAgICAgfQ0KDQogICAgICAgIGZ1bmN0aW9uIHJlZHJhdygpew0KICAgICAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKHJlZHJhdyk7DQoNCiAgICAgICAgICAgIGxldCBtYXJrZXIgPSB7DQogICAgICAgICAgICAgICAgeDpbdm0uY3VycmVudFJhZGl1c10sDQogICAgICAgICAgICAgICAgeTpbZWZmZWN0aXZlUG90ZW50aWFsKHZtLmN1cnJlbnRSYWRpdXMpXSwNCiAgICAgICAgICAgICAgICB0eXBlOiJtYXJrZXJzIiwNCiAgICAgICAgICAgICAgICBuYW1lOiJDdXJyZW50IFVlZmYiDQoNCiAgICAgICAgICAgIH07DQoNCiAgICAgICAgICAgIC8vdXBkYXRlIGxpbmVzIHdoZW4gDQogICAgICAgICAgICBpZih2bS5yZWRyYXcgJiYgdm0ucGF0aFZhbHMubGVuZ3RoKXsNCiAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICBsZXQgclZhbHMgPSBbXTsNCiAgICAgICAgICAgICAgICBsZXQgVWVmZiA9IFtdOw0KICAgICAgICAgICAgICAgIGxldCBVID0gW107DQogICAgICAgICAgICAgICAgbGV0IFVmZWx0ID0gW107DQogICAgICAgICAgICAgICAgbGV0IEVuZXJneVkgPSBbXTsNCiAgICAgICAgICAgICAgICBsZXQgRW5lcmd5ID0gZmluZEUoKTsNCiAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICBwbG90UmFkaXVzID0gdm0ucGF0aFZhbHNbMl07DQogICAgICAgICAgICAgICAgbGV0IHN0ZXBTaXplID0gcGxvdFJhZGl1cy8yMDA7DQoNCiAgICAgICAgICAgICAgICBmb3IobGV0IHIgPSAwLjE7IHIgPCBwbG90UmFkaXVzOyByKz0gc3RlcFNpemUpew0KICAgICAgICAgICAgICAgICAgICByVmFscy5wdXNoKHIpOw0KICAgICAgICAgICAgICAgICAgICBVZWZmLnB1c2goZWZmZWN0aXZlUG90ZW50aWFsKHIpKTsNCiAgICAgICAgICAgICAgICAgICAgVS5wdXNoKHJlYWxQb3RlbnRpYWwocikpOw0KICAgICAgICAgICAgICAgICAgICBVZmVsdC5wdXNoKGZlbHRQb3RlbnRpYWwocikpOw0KICAgICAgICAgICAgICAgICAgICBFbmVyZ3lZLnB1c2goRW5lcmd5KTsNCiAgICAgICAgICAgICAgICB9Ow0KDQoNCiAgICAgICAgICAgICAgICBsZXQgdHJhY2UxID0gew0KICAgICAgICAgICAgICAgIHg6IHJWYWxzLA0KICAgICAgICAgICAgICAgIHk6IFVlZmYsDQogICAgICAgICAgICAgICAgdHlwZTogJ2xpbmVzJywNCiAgICAgICAgICAgICAgICBuYW1lOiAnRWZmIFBvdCcsDQogICAgICAgICAgICAgICAgfTsNCg0KICAgICAgICAgICAgICAgIGxldCB0cmFjZTIgPSB7DQogICAgICAgICAgICAgICAgeDogclZhbHMsDQogICAgICAgICAgICAgICAgeTogVSwNCiAgICAgICAgICAgICAgICB0eXBlOiAnbGluZXMnLA0KICAgICAgICAgICAgICAgIG5hbWU6ICdQb3RlbnRpYWwnLA0KICAgICAgICAgICAgICAgIH07DQoNCiAgICAgICAgICAgICAgICBsZXQgdHJhY2UzID0gew0KICAgICAgICAgICAgICAgIHg6IHJWYWxzLA0KICAgICAgICAgICAgICAgIHk6IFVmZWx0LA0KICAgICAgICAgICAgICAgIHR5cGU6ICdsaW5lcycsDQogICAgICAgICAgICAgICAgbmFtZTogJ0FuZyBNb20nLA0KICAgICAgICAgICAgICAgIH07DQoNCiAgICAgICAgICAgICAgICBsZXQgdG90RSA9IHsNCiAgICAgICAgICAgICAgICB4OiByVmFscywNCiAgICAgICAgICAgICAgICB5OiBFbmVyZ3lZLA0KICAgICAgICAgICAgICAgIG5hbWU6ICdUb3RhbCBFbmVyZ3knLA0KICAgICAgICAgICAgICAgIGxpbmU6IHtkYXNoOiAnZGFzaCcsIHdpZHRoOiAxfSwNCiAgICAgICAgICAgICAgICB9Ow0KDQogICAgICAgICAgICAgICAgbGV0IGRhdGEgPSBbdG90RSwgdHJhY2UxLCB0cmFjZTIsIHRyYWNlM107DQoNCiAgICAgICAgICAgICAgICBQbG90bHkubmV3UGxvdCgncG90ZW50aWFsUGxvdCcsIGRhdGEsIHsNCiAgICAgICAgICAgICAgICB4YXhpczoge3JhbmdlOiBbMCwgcGxvdFJhZGl1c10sDQogICAgICAgICAgICAgICAgdGl0bGU6ICdSYWRpdXMnLH0sDQogICAgICAgICAgICAgICAgeWF4aXM6IHtyYW5nZTogZmluZFlSYW5nZSgpfSwNCiAgICAgICAgICAgICAgICB9KQ0KDQoNCiAgICAgICAgICAgICAgICB2bS5yZWRyYXcgPSBmYWxzZTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KDQogICAgICAgIHJlZHJhdygpOw0KICAgIH0NCn0NCg=="},{"version":3,"sources":["EffectivePotential.vue"],"names":[],"mappings":";;;;;;;;AAQA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA","file":"EffectivePotential.vue","sourceRoot":"src/components","sourcesContent":["<template>\r\n    <div>\r\n        <div id=\"potentialPlot\" >\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport * as d3 from 'd3';\r\nimport Plotly from 'plotly.js';\r\n\r\nexport default {\r\n    name:'iv-eff-pot',\r\n    props: {\r\n        pathVals: {default: []},\r\n        redraw: {default: true},\r\n        currentRadius: {default: 0},\r\n    },\r\n    methods:{\r\n        updatePlot(pathVals){\r\n            console.log('updatePlot EffPot');\r\n            this.pathVals = pathVals;\r\n            this.redraw = true;\r\n        },\r\n        updatePosition(pos){\r\n            this.currentRadius = Math.pow(Math.pow(pos[0], 2) + Math.pow(pos[1], 2), 0.5);\r\n        }\r\n    },\r\n    mounted(){\r\n        let vm = this;\r\n        const GravConst = 1;\r\n        const sunMass = 100;\r\n\r\n        let plotRadius = 200;\r\n\r\n        //find energy of orbit\r\n        function findE(){\r\n            // E = Ueff + radial KE\r\n            let rMag = Math.pow(Math.pow(vm.pathVals[0][0], 2) + Math.pow(vm.pathVals[0][1],2),0.5);\r\n            let vMag = Math.pow(Math.pow(vm.pathVals[1][0], 2) + Math.pow(vm.pathVals[1][1],2),0.5);\r\n\r\n            let E = effectivePotential(rMag) + 0.5*Math.pow(vMag,2);\r\n            return E\r\n        };\r\n\r\n        //r should be scalar\r\n        function feltPotential(r){\r\n            let vMag = Math.pow(Math.pow(vm.pathVals[1][0],2) + Math.pow(vm.pathVals[1][1],2), 0.5);\r\n            let rMag = Math.pow(Math.pow(vm.pathVals[0][0],2) + Math.pow(vm.pathVals[0][1],2), 0.5); //Current position for constant L calculation\r\n            let aMag = Math.pow(Math.pow(vm.pathVals[0][0] + vm.pathVals[1][0],2) + Math.pow(vm.pathVals[0][1] + vm.pathVals[1][1],2), 0.5);\r\n            let theta = Math.acos((Math.pow(rMag,2) + Math.pow(vMag,2) - Math.pow(aMag,2))/(2*rMag*vMag));\r\n            \r\n            //console.log(vMag, rMag, aMag, theta);\r\n\r\n            let L = vMag * rMag * Math.sin(theta);\r\n\r\n            return Math.pow(L, 2)/(2*Math.pow(r, 2));\r\n        };\r\n\r\n        //r should be scalar\r\n        function realPotential(r){\r\n            return -GravConst*sunMass*(1/r);\r\n        };\r\n\r\n        //r should be scalar\r\n        function effectivePotential(r){\r\n            return feltPotential(r) + realPotential(r);\r\n        };\r\n\r\n        //finds min and max of potentials at minimum radius of orbit (for reasonable plotting)\r\n        function findYRange(){\r\n            let minR = vm.pathVals[3];\r\n            let yMin = Math.min(realPotential(minR), feltPotential(minR));\r\n            let yMax = Math.max(realPotential(minR), feltPotential(minR));\r\n            return [yMin*1.5, yMax];\r\n        }\r\n\r\n        function redraw(){\r\n            requestAnimationFrame(redraw);\r\n\r\n            let marker = {\r\n                x:[vm.currentRadius],\r\n                y:[effectivePotential(vm.currentRadius)],\r\n                type:\"markers\",\r\n                name:\"Current Ueff\"\r\n\r\n            };\r\n\r\n            //update lines when \r\n            if(vm.redraw && vm.pathVals.length){\r\n                \r\n                let rVals = [];\r\n                let Ueff = [];\r\n                let U = [];\r\n                let Ufelt = [];\r\n                let EnergyY = [];\r\n                let Energy = findE();\r\n                \r\n                plotRadius = vm.pathVals[2];\r\n                let stepSize = plotRadius/200;\r\n\r\n                for(let r = 0.1; r < plotRadius; r+= stepSize){\r\n                    rVals.push(r);\r\n                    Ueff.push(effectivePotential(r));\r\n                    U.push(realPotential(r));\r\n                    Ufelt.push(feltPotential(r));\r\n                    EnergyY.push(Energy);\r\n                };\r\n\r\n\r\n                let trace1 = {\r\n                x: rVals,\r\n                y: Ueff,\r\n                type: 'lines',\r\n                name: 'Eff Pot',\r\n                };\r\n\r\n                let trace2 = {\r\n                x: rVals,\r\n                y: U,\r\n                type: 'lines',\r\n                name: 'Potential',\r\n                };\r\n\r\n                let trace3 = {\r\n                x: rVals,\r\n                y: Ufelt,\r\n                type: 'lines',\r\n                name: 'Ang Mom',\r\n                };\r\n\r\n                let totE = {\r\n                x: rVals,\r\n                y: EnergyY,\r\n                name: 'Total Energy',\r\n                line: {dash: 'dash', width: 1},\r\n                };\r\n\r\n                let data = [totE, trace1, trace2, trace3];\r\n\r\n                Plotly.newPlot('potentialPlot', data, {\r\n                xaxis: {range: [0, plotRadius],\r\n                title: 'Radius',},\r\n                yaxis: {range: findYRange()},\r\n                })\r\n\r\n\r\n                vm.redraw = false;\r\n            }\r\n        }\r\n\r\n        redraw();\r\n    }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n\r\n</style>"]}]}