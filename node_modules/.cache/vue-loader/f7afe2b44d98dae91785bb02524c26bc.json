{"remainingRequest":"/home/robert/Desktop/Visualisations2020/Orbits/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/robert/Desktop/Visualisations2020/Orbits/src/components/EffectivePotential.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/robert/Desktop/Visualisations2020/Orbits/src/components/EffectivePotential.vue","mtime":1597319229935},{"path":"/home/robert/Desktop/Visualisations2020/Orbits/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/robert/Desktop/Visualisations2020/Orbits/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/robert/Desktop/Visualisations2020/Orbits/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/robert/Desktop/Visualisations2020/Orbits/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KDQppbXBvcnQgKiBhcyBkMyBmcm9tICdkMyc7DQppbXBvcnQgUGxvdGx5IGZyb20gJ3Bsb3RseS5qcyc7DQoNCmV4cG9ydCBkZWZhdWx0IHsNCiAgICBuYW1lOidpdi1lZmYtcG90JywNCiAgICBwcm9wczogew0KICAgICAgICBlbmVyZ2llczoge2RlZmF1bHQ6IFtdfSwNCiAgICAgICAgcmVkcmF3OiB7ZGVmYXVsdDogdHJ1ZX0sDQogICAgfSwNCiAgICBtZXRob2RzOnsNCiAgICAgICAgdXBkYXRlUGxvdChlbmVyZ2llcyl7DQogICAgICAgICAgICBjb25zb2xlLmxvZygndXBkYXRlUGxvdCBFZmZQb3QnKTsNCiAgICAgICAgICAgIHRoaXMuZW5lcmdpZXMgPSBlbmVyZ2llczsNCiAgICAgICAgICAgIHRoaXMucmVkcmF3ID0gdHJ1ZTsNCiAgICAgICAgfQ0KICAgIH0sDQogICAgbW91bnRlZCgpew0KICAgICAgICBsZXQgdm0gPSB0aGlzOw0KICAgICAgICBjb25zdCBHcmF2Q29uc3QgPSAxOw0KICAgICAgICBjb25zdCBzdW5NYXNzID0gMTAwOw0KDQogICAgICAgIGxldCBwbG90UmFkaXVzID0gMjAwOw0KDQogICAgICAgIC8vZmluZCBlbmVyZ3kgb2Ygb3JiaXQNCiAgICAgICAgZnVuY3Rpb24gZmluZEUoKXsNCiAgICAgICAgICAgIC8vIEUgPSBVZWZmICsgcmFkaWFsIEtFDQogICAgICAgICAgICBsZXQgck1hZyA9IE1hdGgucG93KE1hdGgucG93KHZtLmVuZXJnaWVzWzBdWzBdLCAyKSArIE1hdGgucG93KHZtLmVuZXJnaWVzWzBdWzFdLDIpLDAuNSk7DQogICAgICAgICAgICBsZXQgdk1hZyA9IE1hdGgucG93KE1hdGgucG93KHZtLmVuZXJnaWVzWzFdWzBdLCAyKSArIE1hdGgucG93KHZtLmVuZXJnaWVzWzFdWzFdLDIpLDAuNSk7DQoNCiAgICAgICAgICAgIGxldCBFID0gZWZmZWN0aXZlUG90ZW50aWFsKHJNYWcpICsgMC41Kk1hdGgucG93KHZNYWcsMik7DQogICAgICAgICAgICByZXR1cm4gRQ0KICAgICAgICB9Ow0KDQogICAgICAgIC8vciBzaG91bGQgYmUgc2NhbGFyDQogICAgICAgIGZ1bmN0aW9uIGZlbHRQb3RlbnRpYWwocil7DQogICAgICAgICAgICBsZXQgdk1hZyA9IE1hdGgucG93KE1hdGgucG93KHZtLmVuZXJnaWVzWzFdWzBdLDIpICsgTWF0aC5wb3codm0uZW5lcmdpZXNbMV1bMV0sMiksIDAuNSk7DQogICAgICAgICAgICBsZXQgck1hZyA9IE1hdGgucG93KE1hdGgucG93KHZtLmVuZXJnaWVzWzBdWzBdLDIpICsgTWF0aC5wb3codm0uZW5lcmdpZXNbMF1bMV0sMiksIDAuNSk7IC8vQ3VycmVudCBwb3NpdGlvbiBmb3IgY29uc3RhbnQgTCBjYWxjdWxhdGlvbg0KICAgICAgICAgICAgbGV0IGFNYWcgPSBNYXRoLnBvdyhNYXRoLnBvdyh2bS5lbmVyZ2llc1swXVswXSArIHZtLmVuZXJnaWVzWzFdWzBdLDIpICsgTWF0aC5wb3codm0uZW5lcmdpZXNbMF1bMV0gKyB2bS5lbmVyZ2llc1sxXVsxXSwyKSwgMC41KTsNCiAgICAgICAgICAgIGxldCB0aGV0YSA9IE1hdGguYWNvcygoTWF0aC5wb3cock1hZywyKSArIE1hdGgucG93KHZNYWcsMikgLSBNYXRoLnBvdyhhTWFnLDIpKS8oMipyTWFnKnZNYWcpKTsNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgY29uc29sZS5sb2codk1hZywgck1hZywgYU1hZywgdGhldGEpOw0KDQogICAgICAgICAgICBsZXQgTCA9IHZNYWcgKiByTWFnICogTWF0aC5zaW4odGhldGEpOw0KDQogICAgICAgICAgICByZXR1cm4gTWF0aC5wb3coTCwgMikvKDIqTWF0aC5wb3cociwgMikpOw0KICAgICAgICB9Ow0KDQogICAgICAgIC8vciBzaG91bGQgYmUgc2NhbGFyDQogICAgICAgIGZ1bmN0aW9uIHJlYWxQb3RlbnRpYWwocil7DQogICAgICAgICAgICByZXR1cm4gLUdyYXZDb25zdCpzdW5NYXNzKigxL3IpOw0KICAgICAgICB9Ow0KDQogICAgICAgIC8vciBzaG91bGQgYmUgc2NhbGFyDQogICAgICAgIGZ1bmN0aW9uIGVmZmVjdGl2ZVBvdGVudGlhbChyKXsNCiAgICAgICAgICAgIHJldHVybiBmZWx0UG90ZW50aWFsKHIpICsgcmVhbFBvdGVudGlhbChyKTsNCiAgICAgICAgfTsNCg0KICAgICAgICBmdW5jdGlvbiByZWRyYXcoKXsNCiAgICAgICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZShyZWRyYXcpOw0KDQogICAgICAgICAgICBpZih2bS5yZWRyYXcgJiYgdm0uZW5lcmdpZXMubGVuZ3RoKXsNCiAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICBsZXQgclZhbHMgPSBbXTsNCiAgICAgICAgICAgICAgICBsZXQgVWVmZiA9IFtdOw0KICAgICAgICAgICAgICAgIGxldCBVID0gW107DQogICAgICAgICAgICAgICAgbGV0IFVmZWx0ID0gW107DQogICAgICAgICAgICAgICAgbGV0IEVuZXJneVkgPSBbXTsNCiAgICAgICAgICAgICAgICBsZXQgRW5lcmd5ID0gZmluZEUoKTsNCg0KICAgICAgICAgICAgICAgIGZvcihsZXQgciA9IDAuMTsgciA8IHBsb3RSYWRpdXM7IHIrPSAwLjAxKXsNCiAgICAgICAgICAgICAgICAgICAgclZhbHMucHVzaChyKTsNCiAgICAgICAgICAgICAgICAgICAgVWVmZi5wdXNoKGVmZmVjdGl2ZVBvdGVudGlhbChyKSk7DQogICAgICAgICAgICAgICAgICAgIFUucHVzaChyZWFsUG90ZW50aWFsKHIpKTsNCiAgICAgICAgICAgICAgICAgICAgVWZlbHQucHVzaChmZWx0UG90ZW50aWFsKHIpKTsNCiAgICAgICAgICAgICAgICAgICAgRW5lcmd5WS5wdXNoKEVuZXJneSk7DQogICAgICAgICAgICAgICAgfTsNCg0KDQogICAgICAgICAgICAgICAgbGV0IHRyYWNlMSA9IHsNCiAgICAgICAgICAgICAgICB4OiByVmFscywNCiAgICAgICAgICAgICAgICB5OiBVZWZmLA0KICAgICAgICAgICAgICAgIHR5cGU6ICdzY2F0dGVyJywNCiAgICAgICAgICAgICAgICBuYW1lOiAnRWZmIFBvdCcsDQogICAgICAgICAgICAgICAgfTsNCg0KICAgICAgICAgICAgICAgIGxldCB0cmFjZTIgPSB7DQogICAgICAgICAgICAgICAgeDogclZhbHMsDQogICAgICAgICAgICAgICAgeTogVSwNCiAgICAgICAgICAgICAgICB0eXBlOiAnc2NhdHRlcicsDQogICAgICAgICAgICAgICAgbmFtZTogJ1BvdGVudGlhbCcsDQogICAgICAgICAgICAgICAgfTsNCg0KICAgICAgICAgICAgICAgIGxldCB0cmFjZTMgPSB7DQogICAgICAgICAgICAgICAgeDogclZhbHMsDQogICAgICAgICAgICAgICAgeTogVWZlbHQsDQogICAgICAgICAgICAgICAgdHlwZTogJ3NjYXR0ZXInLA0KICAgICAgICAgICAgICAgIG5hbWU6ICdBbmcgTW9tJywNCiAgICAgICAgICAgICAgICB9Ow0KDQogICAgICAgICAgICAgICAgbGV0IHRvdEUgPSB7DQogICAgICAgICAgICAgICAgeDogclZhbHMsDQogICAgICAgICAgICAgICAgeTogRW5lcmd5WSwNCiAgICAgICAgICAgICAgICBuYW1lOiAnVG90YWwgRW5lcmd5JywNCiAgICAgICAgICAgICAgICBsaW5lOiB7ZGFzaDogJ2Rhc2gnLCB3aWR0aDogMX0sDQogICAgICAgICAgICAgICAgfTsNCg0KICAgICAgICAgICAgICAgIGxldCBkYXRhID0gW3RvdEUsIHRyYWNlMSwgdHJhY2UyLCB0cmFjZTNdOw0KDQogICAgICAgICAgICAgICAgUGxvdGx5Lm5ld1Bsb3QoJ3BvdGVudGlhbFBsb3QnLCBkYXRhLCB7DQogICAgICAgICAgICAgICAgeGF4aXM6IHtyYW5nZTogWzAsIHBsb3RSYWRpdXNdfSwNCiAgICAgICAgICAgICAgICB5YXhpczoge3JhbmdlOiBbLTEwLCAxXX0NCiAgICAgICAgICAgICAgICB9KQ0KDQoNCiAgICAgICAgICAgICAgICB2bS5yZWRyYXcgPSBmYWxzZTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KDQogICAgICAgIHJlZHJhdygpOw0KICAgIH0NCn0NCg=="},{"version":3,"sources":["EffectivePotential.vue"],"names":[],"mappings":";;;;;;;;AAQA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA","file":"EffectivePotential.vue","sourceRoot":"src/components","sourcesContent":["<template>\r\n    <div>\r\n        <div id=\"potentialPlot\" >\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport * as d3 from 'd3';\r\nimport Plotly from 'plotly.js';\r\n\r\nexport default {\r\n    name:'iv-eff-pot',\r\n    props: {\r\n        energies: {default: []},\r\n        redraw: {default: true},\r\n    },\r\n    methods:{\r\n        updatePlot(energies){\r\n            console.log('updatePlot EffPot');\r\n            this.energies = energies;\r\n            this.redraw = true;\r\n        }\r\n    },\r\n    mounted(){\r\n        let vm = this;\r\n        const GravConst = 1;\r\n        const sunMass = 100;\r\n\r\n        let plotRadius = 200;\r\n\r\n        //find energy of orbit\r\n        function findE(){\r\n            // E = Ueff + radial KE\r\n            let rMag = Math.pow(Math.pow(vm.energies[0][0], 2) + Math.pow(vm.energies[0][1],2),0.5);\r\n            let vMag = Math.pow(Math.pow(vm.energies[1][0], 2) + Math.pow(vm.energies[1][1],2),0.5);\r\n\r\n            let E = effectivePotential(rMag) + 0.5*Math.pow(vMag,2);\r\n            return E\r\n        };\r\n\r\n        //r should be scalar\r\n        function feltPotential(r){\r\n            let vMag = Math.pow(Math.pow(vm.energies[1][0],2) + Math.pow(vm.energies[1][1],2), 0.5);\r\n            let rMag = Math.pow(Math.pow(vm.energies[0][0],2) + Math.pow(vm.energies[0][1],2), 0.5); //Current position for constant L calculation\r\n            let aMag = Math.pow(Math.pow(vm.energies[0][0] + vm.energies[1][0],2) + Math.pow(vm.energies[0][1] + vm.energies[1][1],2), 0.5);\r\n            let theta = Math.acos((Math.pow(rMag,2) + Math.pow(vMag,2) - Math.pow(aMag,2))/(2*rMag*vMag));\r\n            \r\n            console.log(vMag, rMag, aMag, theta);\r\n\r\n            let L = vMag * rMag * Math.sin(theta);\r\n\r\n            return Math.pow(L, 2)/(2*Math.pow(r, 2));\r\n        };\r\n\r\n        //r should be scalar\r\n        function realPotential(r){\r\n            return -GravConst*sunMass*(1/r);\r\n        };\r\n\r\n        //r should be scalar\r\n        function effectivePotential(r){\r\n            return feltPotential(r) + realPotential(r);\r\n        };\r\n\r\n        function redraw(){\r\n            requestAnimationFrame(redraw);\r\n\r\n            if(vm.redraw && vm.energies.length){\r\n                \r\n                let rVals = [];\r\n                let Ueff = [];\r\n                let U = [];\r\n                let Ufelt = [];\r\n                let EnergyY = [];\r\n                let Energy = findE();\r\n\r\n                for(let r = 0.1; r < plotRadius; r+= 0.01){\r\n                    rVals.push(r);\r\n                    Ueff.push(effectivePotential(r));\r\n                    U.push(realPotential(r));\r\n                    Ufelt.push(feltPotential(r));\r\n                    EnergyY.push(Energy);\r\n                };\r\n\r\n\r\n                let trace1 = {\r\n                x: rVals,\r\n                y: Ueff,\r\n                type: 'scatter',\r\n                name: 'Eff Pot',\r\n                };\r\n\r\n                let trace2 = {\r\n                x: rVals,\r\n                y: U,\r\n                type: 'scatter',\r\n                name: 'Potential',\r\n                };\r\n\r\n                let trace3 = {\r\n                x: rVals,\r\n                y: Ufelt,\r\n                type: 'scatter',\r\n                name: 'Ang Mom',\r\n                };\r\n\r\n                let totE = {\r\n                x: rVals,\r\n                y: EnergyY,\r\n                name: 'Total Energy',\r\n                line: {dash: 'dash', width: 1},\r\n                };\r\n\r\n                let data = [totE, trace1, trace2, trace3];\r\n\r\n                Plotly.newPlot('potentialPlot', data, {\r\n                xaxis: {range: [0, plotRadius]},\r\n                yaxis: {range: [-10, 1]}\r\n                })\r\n\r\n\r\n                vm.redraw = false;\r\n            }\r\n        }\r\n\r\n        redraw();\r\n    }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n\r\n</style>"]}]}